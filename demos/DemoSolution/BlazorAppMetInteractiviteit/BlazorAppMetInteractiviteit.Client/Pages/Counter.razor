@page "/counter"
@using Demo.Shared.Entities
@using Demo.Shared.Repositories
@rendermode InteractiveWebAssembly
@inject IDestinationRepository DestinationRepository
@inject PersistentComponentState PersistentComponentState
@* @persistMyShizzle *@

<PageTitle>Destinations</PageTitle>

<h1>Counter</h1>

Renderer: @RendererInfo.Name
IsInteractive: @RendererInfo.IsInteractive

@if (Destinations is not null)
{
    <ul>
        @foreach (var destination in Destinations)
        {
            <li>@destination.Location heeft als ID @destination.Id</li>
        }
    </ul>
}

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    public List<Destination>? Destinations { get; set; }
    protected override async Task OnInitializedAsync()
    {
        PersistentComponentState.RegisterOnPersisting(PersistForClient);

        if (PersistentComponentState.TryTakeFromJson<List<Destination>>("dests", out var destinations))
        {
            Console.WriteLine("init client");
            // client
            Destinations = destinations;
        }
        else
        {
            // server
            Console.WriteLine("init server");
            Destinations = (await DestinationRepository.GetAllAsync()).ToList();
        }

        Console.WriteLine("in de oninitliaized!");
    }

    private Task PersistForClient()
    {
        Console.WriteLine("persist for client");
        PersistentComponentState.PersistAsJson("dests", Destinations);
        return Task.CompletedTask;
    }
}
