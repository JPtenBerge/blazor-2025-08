@inherits TestContext

<h3>CommentEditComponentTests</h3>

@code {
    [Fact]
    public void RendersEmptyWhenCommentIsNull()
    {
        // Act
        var cut = Render(@<CommentEditComponent />);

        // Assert
        cut.MarkupMatches(
    @<text></text>
        );
    }

    [Fact]
    public void RendersForm_WhenCommentIsNotNull()
    {
        Comment comment = new Comment() { Id = 1, Subject = "s1", Body = "b1", PhotoId = 1 };

        // Act
        var cut = Render(@<CommentEditComponent Comment="comment" />);

        // Assert
        cut.MarkupMatches(
    @<div class="card">
        <div class="card-header">
            <h5 class="card-title">Edit Comment</h5>
        </div>
        <div class="card-body">
            <div class="form-group">
                <label for="subject" class="form-control-label">Subject</label>
                <input class="form-control" id="subject" name="subject" value="s1">
            </div>
            <div class="form-group">
                <label for="body" class="form-control-label">Body</label>
                <textarea class="form-control" id="body" name="body" value="b1"></textarea>
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary">Save</button>
            <button class="btn btn-secondary">Cancel</button>
        </div>
    </div>
    );
    }

    [Fact]
    public void UpdateTriggersOnAddComment()
    {
        //Arrange
        Comment comment = new Comment() { Id = 1, Subject = "s1", Body = "b1", PhotoId = 1 };
        var cut = Render(@<CommentEditComponent Comment="comment" OnUpdateComment="OnUpdateComment" />);

        void OnUpdateComment(Comment commentToUpdate)
        {
            comment = commentToUpdate;
        }

        // Act
        cut.Find("#subject").Change("s2");
        cut.Find("#body").Change("b2");
        cut.Find("button.btn-primary").Click();

        // Assert
        comment.Subject.Should().Be("s2");
        comment.Body.Should().Be("b2");
    }

    [Fact]
    public void UpdateTriggersCommentStateChanged()
    {
        // Arrange
        Comment comment = new Comment() { Id = 1, Subject = "s1", Body = "b1", PhotoId = 1 };
        CommentStates CommentState = CommentStates.Edit;
        var cut = Render(@<CommentEditComponent Comment="comment" @bind-CommentState="CommentState" />);

        // Act
        cut.Find("button.btn-primary").Click();

        // Assert
        CommentState.Should().Be(CommentStates.View);
    }

    [Fact]
    public void CancelTriggersCommentStateChanged()
    {
        // Arrange
        Comment comment = new Comment() { Id = 1, Subject = "s1", Body = "b1", PhotoId = 1 };
        CommentStates CommentState = CommentStates.Edit;
        var cut = Render(@<CommentEditComponent Comment="comment" @bind-CommentState="CommentState" />);

        // Act
        cut.Find("button.btn-secondary").Click();

        // Assert
        CommentState.Should().Be(CommentStates.View);
    }
}

@code {

}
